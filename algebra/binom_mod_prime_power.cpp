// mod 2^E
template <int E> struct Binom64 {
  static_assert(1 <= E); static_assert(E <= 64);
  using u64 = unsigned long long;
  static constexpr u64 MASK = (E < 64) ? ((1ULL << E) - 1) : (~0ULL);
  // fs[u] = (2u-1)!! = \prod[0<=i<u] (2i+1): poly in u of deg=2E-2
  static constexpr int deg = 2 * E - 2;
  const u64 fs[127] = {1ULL, 1ULL, 3ULL, 15ULL, 105ULL, 945ULL, 10395ULL, 135135ULL, 2027025ULL, 34459425ULL, 654729075ULL, 13749310575ULL, 316234143225ULL, 7905853580625ULL, 213458046676875ULL, 6190283353629375ULL, 191898783962510625ULL, 6332659870762850625ULL, 282166592185152483ULL, 10440163910850641871ULL, 1338022901564897417ULL, 17965450816741690865ULL, 16197878097801090939ULL, 9481495526376579231ULL, 2908431970669985073ULL, 13385958046862407265ULL, 154329662729360723ULL, 8179472124656118319ULL, 7149109087057268761ULL, 1670848340654183825ULL, 6346331730049087595ULL, 18191354058803310975ULL, 2357173134616391233ULL, 5642301160389017217ULL, 9099296271873121219ULL, 662144253120609167ULL, 10118753824144147625ULL, 799266214140711985ULL, 4604733839424744027ULL, 4076368235223809375ULL, 8438441329618563153ULL, 984216971850205601ULL, 7903032368728858419ULL, 7674964688409107439ULL, 3639141238048489017ULL, 10288920933253145041ULL, 13954601240558617931ULL, 6505830212282854463ULL, 9311315734455970657ULL, 17753910704170676161ULL, 5196472710489536419ULL, 8334909695575733071ULL, 9945471253661131977ULL, 11256813506683967089ULL, 5440680424063623483ULL, 2738355864229307935ULL, 8809595750100354929ULL, 17806883854733871329ULL, 203051112634973459ULL, 5310236104582343087ULL, 4728797939174072409ULL, 335484355066661393ULL, 4371087525780248107ULL, 11430362584954016511ULL, 12810010539815070849ULL, 10731137075994045697ULL, 3826407353294063491ULL, 10850087997952550671ULL, 7469097900539762921ULL, 8695488319922181297ULL, 9634511678062345243ULL, 11853829225993411295ULL, 16443868609488618129ULL, 4730962867317470241ULL, 12922010768414715635ULL, 6918220827999261551ULL, 11633676900153603705ULL, 9065134647384411729ULL, 3143320742657895179ULL, 13886010680841201087ULL, 12713153482314330529ULL, 17675862544556537409ULL, 3473519264025545571ULL, 1281612279218919119ULL, 11115065818754425097ULL, 15324971924833128177ULL, 1132540679708588795ULL, 11462096852490345375ULL, 13618589225178866097ULL, 12413563274417589089ULL, 8418537275602253011ULL, 11122232839824562479ULL, 6226761579844255897ULL, 8252759701195140753ULL, 12186306005598536683ULL, 15815569918139032703ULL, 13954570349898332865ULL, 7442768783707009ULL, 1451339912822866755ULL, 9212801720461476495ULL, 7119879074588212521ULL, 10696400316595242289ULL, 13100207644816645595ULL, 10764676499527362655ULL, 14678746557017875665ULL, 5698514180950445729ULL, 3348127389423193779ULL, 12174859146177313519ULL, 16603802035075628729ULL, 5909947238048869073ULL, 3006359973033713867ULL, 322767386906906431ULL, 16636895059111479265ULL, 17059085410753408193ULL, 17042876835727372067ULL, 10555795828852812367ULL, 3418618735338843465ULL, 3328170164439807857ULL, 7356737547553678523ULL, 9552855841523958047ULL, 14183025057951124465ULL, 5461385329953947105ULL, 17397805945430981779ULL, 1264575603684112559ULL, 17202268930622976217ULL, 3720338624505103121ULL, 11467791065303302571ULL};
  // valFac[i] = v_2(i!), invFac[i] = (i! / 2^(v_2(i!)))^-1
  const int valFac[127] = {0, 0, 1, 1, 3, 3, 4, 4, 7, 7, 8, 8, 10, 10, 11, 11, 15, 15, 16, 16, 18, 18, 19, 19, 22, 22, 23, 23, 25, 25, 26, 26, 31, 31, 32, 32, 34, 34, 35, 35, 38, 38, 39, 39, 41, 41, 42, 42, 46, 46, 47, 47, 49, 49, 50, 50, 53, 53, 54, 54, 56, 56, 57, 57, 63, 63, 64, 64, 66, 66, 67, 67, 70, 70, 71, 71, 73, 73, 74, 74, 78, 78, 79, 79, 81, 81, 82, 82, 85, 85, 86, 86, 88, 88, 89, 89, 94, 94, 95, 95, 97, 97, 98, 98, 101, 101, 102, 102, 104, 104, 105, 105, 109, 109, 110, 110, 112, 112, 113, 113, 116, 116, 117, 117, 119, 119, 120};
  const u64 invFac[127] = {1ULL, 1ULL, 1ULL, 12297829382473034411ULL, 12297829382473034411ULL, 17216961135462248175ULL, 5738987045154082725ULL, 3455104445551947763ULL, 3455104445551947763ULL, 10632091646011078427ULL, 13194464773427946655ULL, 12938333935399527997ULL, 16610607360939543743ULL, 14048561848025039099ULL, 17818432327183192685ULL, 13485724870951913923ULL, 13485724870951913923ULL, 12729406451868057747ULL, 13712207877125040827ULL, 7517864020689047481ULL, 16260968063105450789ULL, 4287997350378269393ULL, 8774701610811457043ULL, 15620123435273605989ULL, 5206707811757868663ULL, 5373356653108989199ULL, 10346197320698142347ULL, 3116043467242086993ULL, 5715647373523027175ULL, 3377564404898992595ULL, 12523000342799633917ULL, 1594080273878023779ULL, 1594080273878023779ULL, 13464119334633553411ULL, 14898340723109277907ULL, 17818311290157842321ULL, 4029450595985265993ULL, 5094510576569750869ULL, 11918707340057072119ULL, 5508535696175952305ULL, 1101707139235190461ULL, 18023694392380908661ULL, 2615103930466667233ULL, 3921762804508200739ULL, 15449314497081287753ULL, 15510641004985215501ULL, 12704860961331673467ULL, 8119994519904738421ULL, 15004494222441280551ULL, 1435606662113672151ULL, 10387600947761895791ULL, 4905789684431099349ULL, 11729210944162116329ULL, 13795325090921408101ULL, 12125554605332732799ULL, 13971673847771351801ULL, 4631202560211557631ULL, 81249167723009783ULL, 12088599536834637603ULL, 11460531969328449081ULL, 11832081908847627575ULL, 11685382896882140803ULL, 14658298085997141277ULL, 6088780627939494819ULL, 6088780627939494819ULL, 10310331804330513123ULL, 3666387765048115843ULL, 4459914820065685697ULL, 6772963486018999729ULL, 18277558847800992893ULL, 17387810548757332703ULL, 16613136439330409641ULL, 12094095200875351969ULL, 2692623779972203673ULL, 14531032484258086501ULL, 3637139326882557455ULL, 16696409925260259733ULL, 216836492535847529ULL, 13249376168112904943ULL, 17913948427468845921ULL, 18340184944461410477ULL, 15484839973864214429ULL, 17924581923135042133ULL, 11995205034093268407ULL, 571200239718727067ULL, 10423704891503261231ULL, 11825251043759561741ULL, 7981089445643827259ULL, 15818344191729981073ULL, 592267779091562745ULL, 6162076197438551933ULL, 8176174056547479303ULL, 8375809338854043281ULL, 9214258459456918469ULL, 15895404710805084747ULL, 8516898946108587413ULL, 8987881006606046343ULL, 11312843106757418471ULL, 8136621809278734743ULL, 15920301697723137597ULL, 6539770171495982021ULL, 14493391603906441185ULL, 16560723037663456155ULL, 15383824944689081005ULL, 9697253029765106977ULL, 4133070159286521849ULL, 1470189555738202421ULL, 6909719182281497823ULL, 14603383138154891917ULL, 17734539144990351009ULL, 12396678650882440167ULL, 3103045693492381705ULL, 3078541395314561903ULL, 7373292254090658271ULL, 17281591722117489367ULL, 11859947035677519629ULL, 1681152937348159409ULL, 2537000496723940045ULL, 13799893893897359511ULL, 6316551738170415329ULL, 1650886387458664463ULL, 12514742978773899975ULL, 7160489453673665363ULL, 15955409441194196233ULL, 12415815835980168663ULL, 4821693009557486563ULL, 1540562117112781661ULL};

  // a^-1
  u64 inv(u64 a) const {
    u64 b = a;
    b *= (2 - a * b);
    b *= (2 - a * b);
    b *= (2 - a * b);
    b *= (2 - a * b);
    b *= (2 - a * b);
    return b;
  }

  // v_2(n!)
  long long valuationFac(long long n) const {
    long long ret = 0;
    for (; n >>= 1; ret += n) {}
    return ret;
  }

  // \prod[0<=i<u] (2i+1) = (2u-1)!!
  u64 facSkipped(long long u) const {
    if (u <= deg) return fs[u];
    int vals[deg + 1], valSuf[deg + 2];
    u64 us[deg + 1], prodSuf[deg + 2];
    valSuf[deg + 1] = 0;
    prodSuf[deg + 1] = 1ULL;
    for (int i = deg; i >= 0; --i) {
      vals[i] = __builtin_ctzll(u - i);
      us[i] = (u - i) >> vals[i];
      valSuf[i] = vals[i] + valSuf[i + 1];
      prodSuf[i] = us[i] * prodSuf[i + 1];
    }
    int valPre = 0;
    u64 prodPre = 1ULL, sum = 0ULL;
    for (int i = 0; i <= deg; ++i) {
      // (u-0)...(u-(i-1))(u-(i+1))...(u-deg) / (i-0)...(i-(i-1))(i-(i+1))...(i-deg)
      const int val = valPre + valSuf[i + 1] - valFac[i] - valFac[deg - i];
      if (val < E) sum += ((prodPre * prodSuf[i + 1] * invFac[i] * invFac[deg - i] * (((deg - i) & 1) ? -1 : +1)) << val) * fs[i];
      valPre += vals[i];
      prodPre *= us[i];
    }
    return sum & MASK;
  }

  // n! / 2^(v_2(n!))
  u64 facP(long long n) const {
    u64 prod = 1ULL;
    for (; n; n >>= 1) prod *= facSkipped((n + 1) >> 1);
    return prod & MASK;
  }

  // binom(n, k)
  u64 operator()(long long n, long long k) const {
    if (n < 0) {
      if (k >= 0) {
        return (((k & 1) ? -1 : +1) * (*this)(-n + k - 1, k)) & MASK;
      } else if (n - k >= 0) {
        return ((((n - k) & 1) ? -1 : +1) * (*this)(-k - 1, n - k)) & MASK;
      } else {
        return 0ULL;
      }
    } else {
      if (0 <= k && k <= n) {
        const int val = __builtin_popcountll(k) + __builtin_popcountll(n - k) - __builtin_popcountll(n);
        return (val < E) ? (((facP(n) * inv(facP(k) * facP(n - k))) << val) & MASK) : 0ULL;
      } else {
        return 0ULL;
      }
    }
  }
};

////////////////////////////////////////////////////////////////////////////////

#include <assert.h>
#include <iostream>
#include <vector>

using std::cerr;
using std::endl;
using std::vector;

template <int E> void test_Binom64() {
  using u64 = unsigned long long;
  constexpr u64 MASK = (E < 64) ? ((1ULL << E) - 1) : (~0ULL);
  constexpr int LIM = 500;
  vector<vector<u64>> bn(LIM, vector<u64>(LIM));
  for (int n = 0; n < LIM; ++n) {
    bn[n][0] = bn[n][n] = 1;
    for (int k = 1; k < n; ++k) {
      bn[n][k] = (bn[n - 1][k - 1] + bn[n - 1][k]) & MASK;
    }
  }
  Binom64<E> binom;
  for (int n = 0; n < LIM; ++n) for (int k = 0; k <= n; ++k) {
    assert(binom(n, k) == bn[n][k]);
  }
  assert(binom(314159265358979323LL, 271828182845904523LL) ==
         (13933965155404611584ULL & MASK));
  assert(binom(6610712437945007615LL, 767219892644916627LL) ==
         (10585274684559990999ULL & MASK));

  test_Binom64<E + 1>();
}
template <> void test_Binom64<65>() {
}
void unittest_Binom64() {
  test_Binom64<1>();
}

int main() {
  unittest_Binom64(); cerr << "PASSED unittest_Binom64" << endl;
  return 0;
}
